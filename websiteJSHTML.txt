<form id="custom-search-form">
  <div style="display: flex; align-items: center; background-color: white; border-radius: 4px; border: 1px solid #ccc; padding: 4px;">
    <svg style="width: 16px; height: 16px; fill: #aaa; margin-right: 4px;">
      <use xlink:href="#search-icon"></use>
    </svg>
    <input type="text" placeholder="Search..." style="flex: 1; border: none; outline: none; background-color: transparent;" id="inputText" name="search_query">
    <button type="submit" style="background-color: blue; color: white; border: none; border-radius: 4px; padding: 0px 8px; margin-left: 4px;">Search</button>
  </div>
</form>

<svg style="display: none;">
  <symbol id="search-icon" viewBox="-35 0 256 256">
    <rect width="256" height="256" fill="none"></rect><circle cx="116" cy="116" r="84" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"></circle><line x1="175.4" y1="175.4" x2="224" y2="224" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"></line>
  </symbol>
</svg>

<div id="waiting" style="display: none; margin-top: 10px; text-align:center;">Please wait...</div>
<div id="result" style="margin-top: 10px;"></div>

<script>
  document.getElementById('custom-search-form').addEventListener('submit', function (event) {
    event.preventDefault();
    const apiUrl = 'https://flaskferrogpt.herokuapp.com/process-text';
    const form = event.target;
    const button = form.querySelector('button');
    const waiting = document.getElementById('waiting');

    button.disabled = true;
    waiting.style.display = 'block';

    fetch(apiUrl, {
      method: 'POST',
      body: new FormData(form),
      headers: { 'Accept': 'application/json' },
      credentials: 'include',
    })
      .then((response) => {
        if (!response.ok) {
          console.error('HTTP status code:', response.status);
          throw new Error('Network response was not ok');
        }
        return response.text().then((text) => {
          try {
            return JSON.parse(text);
          } catch (error) {
            console.error('Error parsing JSON:', text);
            throw error;
          }
        });
      })
      .then((data) => {
        document.getElementById('result').textContent = data.message;
      })
      .catch((error) => {
        console.error('Error fetching data:', error);
      })
      .finally(() => {
        button.disabled = false;
        waiting.style.display = 'none';
      });
  });
</script>
